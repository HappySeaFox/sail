name: Build Python Wheels

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13', '3.14']
        exclude:
          # Python 3.9 doesn't support macOS 14 (ARM64)
          - os: macos-14
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          libavif-dev \
          libgif-dev \
          libheif-dev \
          libjbig-dev \
          libjpeg-dev \
          libjxl-dev \
          libnanosvg-dev \
          libopenexr-dev \
          libopenjp2-7-dev \
          libpng-dev \
          libtiff-dev \
          libwebp-dev \
          zlib1g-dev

    - name: Install build dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install \
          cmake \
          giflib \
          jbigkit \
          jpeg-turbo \
          jpeg-xl \
          libavif \
          libheif \
          libpng \
          libtiff \
          openexr \
          openjpeg \
          webp \
          zlib

    - name: Set up vcpkg (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git ${{ github.workspace }}/../vcpkg
        cd ${{ github.workspace }}/../vcpkg
        ./bootstrap-vcpkg.bat
        ./vcpkg install `
          giflib `
          jbigkit `
          libavif `
          libheif `
          libjpeg-turbo `
          libjxl `
          libpng `
          libwebp `
          nanosvg `
          openjpeg `
          tiff `
          zlib `
          --triplet x64-windows

    - name: Install Python build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools pybind11 numpy

    - name: Install auditwheel (Linux only)
      if: runner.os == 'Linux'
      run: pip install auditwheel patchelf

    - name: Install delocate (macOS only)
      if: runner.os == 'macOS'
      run: pip install delocate

    - name: Build wheel (Linux)
      if: runner.os == 'Linux'
      working-directory: src/bindings/python
      run: |
        python -m build --wheel
        mkdir -p wheelhouse
        for wheel in dist/*.whl; do
          auditwheel repair "$wheel" -w wheelhouse/
        done

    - name: Build wheel (macOS)
      if: runner.os == 'macOS'
      working-directory: src/bindings/python
      run: |
        python -m build --wheel
        mkdir -p wheelhouse
        for wheel in dist/*.whl; do
          # Determine architecture based on runner
          if [ "$(uname -m)" = "arm64" ]; then
            delocate-wheel --require-archs arm64 -w wheelhouse/ "$wheel"
          else
            delocate-wheel --require-archs x86_64 -w wheelhouse/ "$wheel"
          fi
        done

    - name: Build wheel (Windows)
      if: runner.os == 'Windows'
      working-directory: src/bindings/python
      env:
        CMAKE_ARGS: -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/../vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows -DCMAKE_C_FLAGS=-MP -DCMAKE_CXX_FLAGS=-MP
      run: |
        python -m build --wheel
        mkdir -p wheelhouse
        Copy-Item dist/*.whl wheelhouse/

    - name: Check wheels
      working-directory: src/bindings/python
      run: |
        twine check --strict wheelhouse/*.whl

    - name: Test wheel installation
      working-directory: src/bindings/python
      run: |
        pip install wheelhouse/*.whl
        python -c "import sailpy; print('sailpy version:', sailpy.__version__)"

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: src/bindings/python/wheelhouse/*.whl
        retention-days: 30

  upload_pypi:
    name: Upload wheels to PyPI
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/sailpy
    permissions:
      id-token: write

    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist
        merge-multiple: true

    - name: List all wheels
      run: ls -lh dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
