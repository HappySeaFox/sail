language: cpp

notifications:
  email: false

addons:
  apt:
    packages:
      - libavif-dev
      - libgif-dev
      - libheif-dev
      - libheif-plugin-x265
      - libjbig-dev
      - libjpeg-dev
      - libjxl-dev
      - libnanosvg-dev
      - libopenexr-dev
      - libopenjp2-7-dev
      - libpng-dev
      - libsdl2-dev
      - libtiff-dev
      - libwebp-dev
      - zlib1g-dev
    update: true

jobs:
  include:
    - os: windows
      name: "Windows Server"
      env:
        - PATH="/c/SAIL/bin:$PATH"
      cache:
        directories:
          - vcpkg
    - os: linux
      dist: noble
      name: "Ubuntu 24.04 Noble"

before_script:
- |-
  fail_on_error()
  {
    if [ $# -eq 0 ]; then
      echo "Error: No arguments given for fail_on_error()" >&2
      exit 1
    fi

    set -e
    "$@"
    set +e
  }

  case "$TRAVIS_OS_NAME" in
    windows)
      if [ ! -f vcpkg/vcpkg ]; then
        fail_on_error rm -rf vcpkg
        fail_on_error git clone https://github.com/microsoft/vcpkg.git
        fail_on_error vcpkg/bootstrap-vcpkg.sh
      fi

      fail_on_error git -C vcpkg pull

      # libheif requires <bit> which is not available in this particular MSVC
      # openexr also has some uninvestigated issues
      for triplet in x64-windows x64-windows-static-md; do
        fail_on_error vcpkg/vcpkg install giflib jbigkit libavif[aom] libjpeg-turbo libjxl libpng libwebp nanosvg openjpeg tiff zlib \
                                  --triplet $triplet --clean-buildtrees-after-build
      done
    ;;
  esac

script:
- |-
  fail_on_error()
  {
    if [ $# -eq 0 ]; then
      echo "Error: No arguments given for fail_on_error()" >&2
      exit 1
    fi

    set -e
    "$@"
    set +e
  }

  test_external_windows()
  {
    local project_path="$1"
    local sail_cmake_path="$2"
    local build_type="$3"
    local old_dir="$PWD"

    echo
    echo "External Windows Test '$project_path' '$build_type'"
    echo

    cd "$TRAVIS_BUILD_DIR"

    cd "$project_path"
    rm -rf build
    mkdir build
    cd build

    fail_on_error cmake -A x64 -DSAIL_DEV=ON -DCMAKE_PREFIX_PATH="$sail_cmake_path" ..
    fail_on_error cmake --build . --config $build_type

    cd "$old_dir"
  }

  test_external_unix()
  {
    local project_path="$1"
    local build_type="$2"
    local exe="$3"
    local old_dir="$PWD"

    echo
    echo "External Unix Test '$project_path' '$build_type'"
    echo

    cd "$TRAVIS_BUILD_DIR"

    cd "$project_path"
    rm -rf build
    mkdir build
    cd build

    fail_on_error cmake -DSAIL_DEV=ON -DCMAKE_BUILD_TYPE="$build_type" ..
    fail_on_error cmake --build . -j$(nproc)
    fail_on_error "$exe"

    cd "$old_dir"
  }

  build()
  {
    echo
    echo " *** Building with $@ ***"
    echo

    eval $@

    cd "$TRAVIS_BUILD_DIR"

    rm -rf build
    mkdir build
    cd build

    case "$TRAVIS_OS_NAME" in
      windows)
        CMAKE_INSTALL_PREFIX="C:/SAIL"

        if [ "$BUILD_SHARED_LIBS" = "ON" ]; then
            VCPKG_TARGET_TRIPLET="x64-windows"
        else
            if [ "$SAIL_WINDOWS_STATIC_CRT" = "ON" ]; then
                VCPKG_TARGET_TRIPLET="x64-windows-static"
            else
                VCPKG_TARGET_TRIPLET="x64-windows-static-md"
            fi
        fi

        fail_on_error cmake -A x64 -DBUILD_SHARED_LIBS="$BUILD_SHARED_LIBS" -DCMAKE_INSTALL_PREFIX="$CMAKE_INSTALL_PREFIX" \
                                   -DSAIL_DEV=ON -DSAIL_COMBINE_CODECS="$SAIL_COMBINE_CODECS" -DSAIL_WINDOWS_STATIC_CRT="$SAIL_WINDOWS_STATIC_CRT" \
                                   -DCMAKE_TOOLCHAIN_FILE="../vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET="$VCPKG_TARGET_TRIPLET" \
                                   -DCMAKE_FIND_DEBUG_MODE=ON ..
        fail_on_error cmake --build . --config $CMAKE_BUILD_TYPE --target install -j$(nproc)

        fail_on_error ctest --test-dir tests -C $CMAKE_BUILD_TYPE --output-on-failure -j$(nproc)

        fail_on_error "$CMAKE_INSTALL_PREFIX/bin/sail" --version

        test_external_windows "tests/external/link/c"   "$CMAKE_INSTALL_PREFIX/lib/cmake" "$CMAKE_BUILD_TYPE"
        test_external_windows "tests/external/link/c++" "$CMAKE_INSTALL_PREFIX/lib/cmake" "$CMAKE_BUILD_TYPE"

        rm -rf "$CMAKE_INSTALL_PREFIX"
      ;;
      linux)
        CMAKE_INSTALL_PREFIX="/usr/local"

        fail_on_error cmake -DCMAKE_BUILD_TYPE="$CMAKE_BUILD_TYPE" -DCMAKE_INSTALL_PREFIX="$CMAKE_INSTALL_PREFIX" \
                            -DBUILD_SHARED_LIBS="$BUILD_SHARED_LIBS" -DSAIL_DEV=ON -DSAIL_COMBINE_CODECS="$SAIL_COMBINE_CODECS" ..
        fail_on_error cmake --build . -j$(nproc)

        fail_on_error sudo make install
        fail_on_error sudo ldconfig

        fail_on_error ctest --test-dir tests --output-on-failure -j$(nproc)

        fail_on_error "$CMAKE_INSTALL_PREFIX/bin/sail" --version

        test_external_unix "tests/external/link/c"   "$CMAKE_BUILD_TYPE" "./external-c-api-link"
        test_external_unix "tests/external/link/c++" "$CMAKE_BUILD_TYPE" "./external-c++-api-link"

        xargs sudo rm -v < install_manifest.txt
      ;;
    esac
  }

  CMAKE_BUILD_TYPE=Debug

  # SHARED
  build CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE BUILD_SHARED_LIBS=ON

  # SHARED, COMBINED
  build CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE BUILD_SHARED_LIBS=ON SAIL_COMBINE_CODECS=ON

  # STATIC
  if [ "$TRAVIS_OS_NAME" = "windows" ]; then
    build CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE BUILD_SHARED_LIBS=OFF SAIL_WINDOWS_STATIC_CRT=OFF # /MD
  else
    build CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE BUILD_SHARED_LIBS=OFF
  fi
