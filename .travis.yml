language: cpp

notifications:
  email: false

addons:
  homebrew:
    packages:
      - sdl2
      - giflib
      - jpeg-turbo
      - libpng
      - libtiff
      - webp
    update: true
  apt:
    packages:
      - libsdl2-dev
      - libgif-dev
      - libjpeg-dev
      - libpng-dev
      - libtiff-dev
      - libwebp-dev
    update: true

jobs:
  include:
    - os: windows
      name: "Windows Server [SHARED;DEBUG]"
      env:
        - PATH="/c/SAIL/bin:$PATH"
        - BUILD_SHARED_LIBS="ON"
        - CMAKE_BUILD_TYPE="Debug"
      cache:
        directories:
          - extra/B
    - os: windows
      name: "Windows Server [STATIC;DEBUG]"
      env:
        - PATH="/c/SAIL/bin:$PATH"
        - BUILD_SHARED_LIBS="OFF"
        - CMAKE_BUILD_TYPE="Debug"
      cache:
        directories:
          - extra/B
    - os: linux
      dist: focal
      name: "Ubuntu 20.04 Focal [SHARED;DEBUG]"
      env:
        - BUILD_SHARED_LIBS="ON"
        - CMAKE_BUILD_TYPE="Debug"
    - os: linux
      dist: focal
      name: "Ubuntu 20.04 Focal [STATIC;DEBUG]"
      env:
        - BUILD_SHARED_LIBS="OFF"
        - CMAKE_BUILD_TYPE="Debug"
    - os: osx
      osx_image: xcode12.5
      name: "macOS 11.3 [SHARED;DEBUG]"
      env:
        - BUILD_SHARED_LIBS="ON"
        - CMAKE_PREFIX_PATH="/usr/local/opt/jpeg-turbo;$CMAKE_PREFIX_PATH"
        - CMAKE_BUILD_TYPE="Debug"

before_script:
- |-
  case "$TRAVIS_OS_NAME" in
    windows)
      # Build non-existing extra libs
      if [ -d extra/B/bin ]; then
        extra_bin_time=$(stat -c %Y extra/B/bin)
        build_script_time=$(git log --pretty=format:%cd -n 1 --date=unix --date-order -- extra/build)

        if [ $build_script_time -gt $extra_bin_time ]; then
          extra/build
        fi
      else
        extra/build
      fi
    ;;
  esac

script:
- |-
  fail_on_error()
  {
    if [ $# -eq 0 ]; then
      echo "Error: No arguments given for fail_on_error()" >&2
      exit 1
    fi

    set -e
    "$@"
    set +e
  }

  test_external_windows()
  {
    local project_path="$1"
    local sail_cmake_path="$2"
    local build_type="$3"

    echo
    echo "External Windows Test '$project_path' '$build_type'"
    echo

    cd "$TRAVIS_BUILD_DIR"

    cd "$project_path"
    mkdir build
    cd build

    fail_on_error cmake -A x64 -DCMAKE_PREFIX_PATH="$sail_cmake_path" ..
    fail_on_error cmake --build . --config $build_type
  }

  test_external_unix()
  {
    local project_path="$1"
    local build_type="$2"

    echo
    echo "External Unix Test '$project_path' '$build_type'"
    echo

    cd "$TRAVIS_BUILD_DIR"

    cd "$project_path"
    mkdir build
    cd build

    fail_on_error cmake -DCMAKE_BUILD_TYPE="$build_type" ..
    fail_on_error cmake --build .
  }

  # Defaults
  #
  CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-Debug}
  BUILD_SHARED_LIBS=${BUILD_SHARED_LIBS:-ON}

  case "$TRAVIS_OS_NAME" in
    windows)
      mkdir build
      cd build

      CMAKE_INSTALL_PREFIX="C:/SAIL"

      fail_on_error cmake -A x64 -DBUILD_SHARED_LIBS="$BUILD_SHARED_LIBS" -DCMAKE_INSTALL_PREFIX="$CMAKE_INSTALL_PREFIX" -DSAIL_DEV=ON ..
      fail_on_error cmake --build . --config $CMAKE_BUILD_TYPE --target install

      cd tests
      fail_on_error ctest --verbose -C $CMAKE_BUILD_TYPE

      fail_on_error "$CMAKE_INSTALL_PREFIX/bin/sail" --version

      test_external_windows "tests/external/link/c"   "$CMAKE_INSTALL_PREFIX/lib/cmake" "$CMAKE_BUILD_TYPE"
      test_external_windows "tests/external/link/c++" "$CMAKE_INSTALL_PREFIX/lib/cmake" "$CMAKE_BUILD_TYPE"
    ;;
    osx | linux)
      mkdir build
      cd build

      CMAKE_INSTALL_PREFIX="/usr/local"

      fail_on_error cmake -DBUILD_SHARED_LIBS="$BUILD_SHARED_LIBS" -DCMAKE_BUILD_TYPE="$CMAKE_BUILD_TYPE" -DCMAKE_INSTALL_PREFIX="$CMAKE_INSTALL_PREFIX" -DSAIL_DEV=ON ..
      fail_on_error cmake --build .
      fail_on_error sudo make install

      if [ "$TRAVIS_OS_NAME" = "linux" ]; then
          fail_on_error sudo ldconfig
      fi

      cd tests
      fail_on_error ctest --verbose

      fail_on_error "$CMAKE_INSTALL_PREFIX/bin/sail" --version

      test_external_unix "tests/external/link/c"   "$CMAKE_BUILD_TYPE"
      test_external_unix "tests/external/link/c++" "$CMAKE_BUILD_TYPE"
    ;;
  esac
